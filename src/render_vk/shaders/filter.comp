#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable

precision highp float;

layout(push_constant) uniform Push {
    vec2 bicubicScale;
    vec2 inSize;
    vec2 newSize;
	int  texIndex;
    int  filterType;
} push;

#include "filters.glsl"


layout(set = 0, binding = 0)        uniform sampler2D[] texSamplers;
layout(set = 1, binding = 0, rgba8) uniform writeonly image2D[] img;


void main()
{
    // vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(img[0]));
    // vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / textureSize(texSamplers[push.texIndex], 0);
    // vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / push.newSize;
    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / push.inSize;

    // float u = float(gl_GlobalInvocationID.x) / float(push.newSize.x - 1);
    // float v = float(gl_GlobalInvocationID.y) / float(push.newSize.y - 1);

    // vec4 outColor = DoPixelBinning( texSamplers[push.texIndex], uv, push.inSize, push.newSize );
    vec4 outColor = texture( texSamplers[push.texIndex], uv );

    imageStore(img[0], ivec2(gl_GlobalInvocationID.xy), outColor);
}

